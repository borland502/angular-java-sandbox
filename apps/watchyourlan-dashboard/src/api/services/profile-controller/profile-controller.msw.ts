/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { JsonSchema, RepresentationModelObject } from '../../models';

export const getListAllFormsOfMetadataResponseMock = (
  overrideResponse: Partial<RepresentationModelObject> = {}
): RepresentationModelObject => ({
  _links: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: {
        deprecation: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        href: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        hreflang: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        profile: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        templated: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      },
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getDescriptorResponseMock = (
  overrideResponse: Partial<string | JsonSchema> = {}
): string | JsonSchema =>
  faker.helpers.arrayElement([
    faker.word.sample(),
    {
      $schema: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      definitions: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: {
            properties: faker.helpers.arrayElement([
              {
                [faker.string.alphanumeric(5)]: {
                  readOnly: faker.helpers.arrayElement([
                    faker.datatype.boolean(),
                    undefined,
                  ]),
                  title: faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    undefined,
                  ]),
                },
              },
              undefined,
            ]),
            requiredProperties: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1
              ).map(() => faker.string.alpha(20)),
              undefined,
            ]),
            type: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
          },
        },
        undefined,
      ]),
      description: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      properties: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: {
            readOnly: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            title: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
          },
        },
        undefined,
      ]),
      requiredProperties: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.string.alpha(20)),
        undefined,
      ]),
      title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      ...overrideResponse,
    },
  ]);

export const getListAllFormsOfMetadataMockHandler = (
  overrideResponse?:
    | RepresentationModelObject
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<RepresentationModelObject> | RepresentationModelObject)
) => {
  return http.get('*/profile', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListAllFormsOfMetadataResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getDescriptorMockHandler = (
  overrideResponse?:
    | string
    | JsonSchema
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<string | JsonSchema> | string | JsonSchema)
) => {
  return http.get('*/profile/hosts', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDescriptorResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};
export const getProfileControllerMock = () => [
  getListAllFormsOfMetadataMockHandler(),
  getDescriptorMockHandler(),
];
