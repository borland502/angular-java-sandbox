/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import type {
  EntityModelHost,
  GetCollectionResourceHostGetParams,
  HostRequestBody,
  PagedModelEntityModelHost,
} from '../../models';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class HostEntityControllerService {
  constructor(private http: HttpClient) {}
  /**
   * get-host
   */
  getCollectionResourceHostGet<TData = PagedModelEntityModelHost | string>(
    params?: GetCollectionResourceHostGetParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  getCollectionResourceHostGet<TData = PagedModelEntityModelHost | string>(
    params?: GetCollectionResourceHostGetParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  getCollectionResourceHostGet<TData = PagedModelEntityModelHost | string>(
    params?: GetCollectionResourceHostGetParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  getCollectionResourceHostGet<TData = PagedModelEntityModelHost | string>(
    params?: GetCollectionResourceHostGetParams,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/hosts`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
   * create-host
   */
  postCollectionResourceHostPost<TData = EntityModelHost>(
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  postCollectionResourceHostPost<TData = EntityModelHost>(
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  postCollectionResourceHostPost<TData = EntityModelHost>(
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  postCollectionResourceHostPost<TData = EntityModelHost>(
    hostRequestBody: HostRequestBody,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(`/hosts`, hostRequestBody, options);
  }
  /**
   * get-host
   */
  getItemResourceHostGet<TData = EntityModelHost>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  getItemResourceHostGet<TData = EntityModelHost>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  getItemResourceHostGet<TData = EntityModelHost>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  getItemResourceHostGet<TData = EntityModelHost>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/hosts/${id}`, options);
  }
  /**
   * update-host
   */
  putItemResourceHostPut<TData = EntityModelHost | void>(
    id: string,
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  putItemResourceHostPut<TData = EntityModelHost | void>(
    id: string,
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  putItemResourceHostPut<TData = EntityModelHost | void>(
    id: string,
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  putItemResourceHostPut<TData = EntityModelHost | void>(
    id: string,
    hostRequestBody: HostRequestBody,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.put<TData>(`/hosts/${id}`, hostRequestBody, options);
  }
  /**
   * delete-host
   */
  deleteItemResourceHostDelete<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  deleteItemResourceHostDelete<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  deleteItemResourceHostDelete<TData = void>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  deleteItemResourceHostDelete<TData = void>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.delete<TData>(`/hosts/${id}`, options);
  }
  /**
   * patch-host
   */
  patchItemResourceHostPatch<TData = EntityModelHost | void>(
    id: string,
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  patchItemResourceHostPatch<TData = EntityModelHost | void>(
    id: string,
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  patchItemResourceHostPatch<TData = EntityModelHost | void>(
    id: string,
    hostRequestBody: HostRequestBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  patchItemResourceHostPatch<TData = EntityModelHost | void>(
    id: string,
    hostRequestBody: HostRequestBody,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.patch<TData>(`/hosts/${id}`, hostRequestBody, options);
  }
}

export type GetCollectionResourceHostGetClientResult = NonNullable<
  PagedModelEntityModelHost | string
>;
export type PostCollectionResourceHostPostClientResult =
  NonNullable<EntityModelHost>;
export type GetItemResourceHostGetClientResult = NonNullable<EntityModelHost>;
export type PutItemResourceHostPutClientResult =
  NonNullable<EntityModelHost | void>;
export type DeleteItemResourceHostDeleteClientResult = NonNullable<void>;
export type PatchItemResourceHostPatchClientResult =
  NonNullable<EntityModelHost | void>;
