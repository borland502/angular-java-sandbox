/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { EntityModelHost, PagedModelEntityModelHost } from '../../models';

export const getGetCollectionResourceHostGetResponseMock = (
  overrideResponse: Partial<PagedModelEntityModelHost | string> = {}
): PagedModelEntityModelHost | string =>
  faker.helpers.arrayElement([
    {
      _embedded: faker.helpers.arrayElement([
        {
          hosts: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({
              _links: faker.helpers.arrayElement([
                {
                  [faker.string.alphanumeric(5)]: {
                    deprecation: faker.helpers.arrayElement([
                      faker.string.alpha(20),
                      undefined,
                    ]),
                    href: faker.helpers.arrayElement([
                      faker.string.alpha(20),
                      undefined,
                    ]),
                    hreflang: faker.helpers.arrayElement([
                      faker.string.alpha(20),
                      undefined,
                    ]),
                    name: faker.helpers.arrayElement([
                      faker.string.alpha(20),
                      undefined,
                    ]),
                    profile: faker.helpers.arrayElement([
                      faker.string.alpha(20),
                      undefined,
                    ]),
                    templated: faker.helpers.arrayElement([
                      faker.datatype.boolean(),
                      undefined,
                    ]),
                    title: faker.helpers.arrayElement([
                      faker.string.alpha(20),
                      undefined,
                    ]),
                    type: faker.helpers.arrayElement([
                      faker.string.alpha(20),
                      undefined,
                    ]),
                  },
                },
                undefined,
              ]),
              date: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
              ]),
              hw: faker.helpers.arrayElement([
                faker.string.alpha(20),
                undefined,
              ]),
              ip: faker.helpers.arrayElement([
                faker.helpers.fromRegExp('^(?:[0-9]{1,3}.){3}[0-9]{1,3}$'),
                undefined,
              ]),
              known: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              mac: faker.helpers.arrayElement([
                faker.helpers.fromRegExp(
                  '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
                ),
                undefined,
              ]),
              name: faker.string.alpha(20),
              now: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        },
        undefined,
      ]),
      _links: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: {
            deprecation: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            href: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            hreflang: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            profile: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            templated: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            title: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            type: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
          },
        },
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        {
          number: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          size: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          totalElements: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          totalPages: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
        },
        undefined,
      ]),
      ...overrideResponse,
    },
    faker.word.sample(),
  ]);

export const getPostCollectionResourceHostPostResponseMock = (
  overrideResponse: Partial<EntityModelHost> = {}
): EntityModelHost => ({
  _links: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: {
        deprecation: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        href: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        hreflang: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        profile: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        templated: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      },
    },
    undefined,
  ]),
  date: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  hw: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ip: faker.helpers.arrayElement([
    faker.helpers.fromRegExp('^(?:[0-9]{1,3}.){3}[0-9]{1,3}$'),
    undefined,
  ]),
  known: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  mac: faker.helpers.arrayElement([
    faker.helpers.fromRegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'),
    undefined,
  ]),
  name: faker.string.alpha(20),
  now: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetItemResourceHostGetResponseMock = (
  overrideResponse: Partial<EntityModelHost> = {}
): EntityModelHost => ({
  _links: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: {
        deprecation: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        href: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        hreflang: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        profile: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        templated: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      },
    },
    undefined,
  ]),
  date: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  hw: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ip: faker.helpers.arrayElement([
    faker.helpers.fromRegExp('^(?:[0-9]{1,3}.){3}[0-9]{1,3}$'),
    undefined,
  ]),
  known: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  mac: faker.helpers.arrayElement([
    faker.helpers.fromRegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'),
    undefined,
  ]),
  name: faker.string.alpha(20),
  now: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPutItemResourceHostPutResponseMock = (
  overrideResponse: Partial<EntityModelHost | void> = {}
): EntityModelHost | void => ({
  _links: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: {
        deprecation: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        href: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        hreflang: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        profile: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        templated: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      },
    },
    undefined,
  ]),
  date: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  hw: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ip: faker.helpers.arrayElement([
    faker.helpers.fromRegExp('^(?:[0-9]{1,3}.){3}[0-9]{1,3}$'),
    undefined,
  ]),
  known: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  mac: faker.helpers.arrayElement([
    faker.helpers.fromRegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'),
    undefined,
  ]),
  name: faker.string.alpha(20),
  now: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPatchItemResourceHostPatchResponseMock = (
  overrideResponse: Partial<EntityModelHost | void> = {}
): EntityModelHost | void => ({
  _links: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: {
        deprecation: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        href: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        hreflang: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        profile: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        templated: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      },
    },
    undefined,
  ]),
  date: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  hw: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ip: faker.helpers.arrayElement([
    faker.helpers.fromRegExp('^(?:[0-9]{1,3}.){3}[0-9]{1,3}$'),
    undefined,
  ]),
  known: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  mac: faker.helpers.arrayElement([
    faker.helpers.fromRegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'),
    undefined,
  ]),
  name: faker.string.alpha(20),
  now: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetCollectionResourceHostGetMockHandler = (
  overrideResponse?:
    | PagedModelEntityModelHost
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) =>
        | Promise<PagedModelEntityModelHost | string>
        | PagedModelEntityModelHost
        | string)
) => {
  return http.get('*/hosts', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCollectionResourceHostGetResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getPostCollectionResourceHostPostMockHandler = (
  overrideResponse?:
    | EntityModelHost
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<EntityModelHost> | EntityModelHost)
) => {
  return http.post('*/hosts', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostCollectionResourceHostPostResponseMock()
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getGetItemResourceHostGetMockHandler = (
  overrideResponse?:
    | EntityModelHost
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<EntityModelHost> | EntityModelHost)
) => {
  return http.get('*/hosts/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetItemResourceHostGetResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getPutItemResourceHostPutMockHandler = (
  overrideResponse?:
    | EntityModelHost
    | void
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0]
      ) => Promise<EntityModelHost | void> | EntityModelHost | void)
) => {
  return http.put('*/hosts/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPutItemResourceHostPutResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getDeleteItemResourceHostDeleteMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete('*/hosts/:id', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getPatchItemResourceHostPatchMockHandler = (
  overrideResponse?:
    | EntityModelHost
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<EntityModelHost | void> | EntityModelHost | void)
) => {
  return http.patch('*/hosts/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchItemResourceHostPatchResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};
export const getHostEntityControllerMock = () => [
  getGetCollectionResourceHostGetMockHandler(),
  getPostCollectionResourceHostPostMockHandler(),
  getGetItemResourceHostGetMockHandler(),
  getPutItemResourceHostPutMockHandler(),
  getDeleteItemResourceHostDeleteMockHandler(),
  getPatchItemResourceHostPatchMockHandler(),
];
